/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
        public boolean boolexecuter = true;
        public Map<String, Object> variableValues = new HashMap<>();
        public ArrayList<String> variablesAuxiliares = new ArrayList<>();
        public Map<String, ArrayList<String>> procParams = new HashMap<>();
        public Map<String, ArrayList<String>> procBloques = new HashMap<>();
        public ArrayList<String > procNames = new ArrayList <String>();
        int chipshere;

        private RobotWorldDec world;

        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

// TODO
// =================================================================================
// PRINCIPAL: La que es invocada desde el Interpreter para hacer todo el parsing
// =================================================================================
  final public boolean command(Console sistema) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      label_1:
      while (true) {
        commandBlock(true);
try {
              //Emplea concurrencia para dormir el Thread y que se pueda ver en el dibujo
                Thread.sleep(700);
            } catch (InterruptedException e) {
                System.err.format("IOException: %s%n", e);
                    }
                sistema.printOutput(salida);
                {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// TODO
// =================================================================================
// LECTURA: Invocados para lanzar errores de lectura del parser
// =================================================================================

// Identifica números sobre el programa
  final public int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                }
                {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

// Identifica variables/nombres sobre el programa
  final public String var() throws ParseException, Error {String name= "";
    jj_consume_token(NAME);
try
                {
                        name += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading variable !!");}
                }
                {if ("" != null) return name;}
    throw new Error("Missing return statement in function");
}

// Identifica números constantes y/o valores numéricos de variables
  final public int numvar() throws ParseException, Error {int value= 0;
        String name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMS:{
      jj_consume_token(NUMS);
try
                {
                        value = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                }
                {if ("" != null) return value;}
      break;
      }
    case NAME:{
      jj_consume_token(NAME);
try
                {
                        name = String.valueOf(token.image);
                        value =  (int) variableValues.get(name);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case DIM:{
      jj_consume_token(DIM);
try
                {
                        name = String.valueOf(token.image);
                        value =  world.getN();
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case MYXPOS:{
      jj_consume_token(MYXPOS);
try
                {
                        name = String.valueOf(token.image);
                        value =  (int) world.getPosition().getX();
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case MYYPOS:{
      jj_consume_token(MYYPOS);
try
                {
                        name = String.valueOf(token.image);
                        value =  (int) world.getPosition().getY();
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case MYCHIPS:{
      jj_consume_token(MYCHIPS);
try
                {
                        name = String.valueOf(token.image);
                        value =  (int) world.getMyChips();
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case MYBALLOONS:{
      jj_consume_token(MYBALLOONS);
try
                {
                        name = String.valueOf(token.image);
                        value =  (int) world.getMyBalloons();
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    case BALLOONSHERE:{
      jj_consume_token(BALLOONSHERE);
try
                {
                        name = String.valueOf(token.image);
                        value =  world.countBalloons();
                }
                catch (Exception e)
                {
                }
                {if ("" != null) return value;}
      break;
      }
    case CHIPSHERE:{
      jj_consume_token(CHIPSHERE);
try
                {
                        name = String.valueOf(token.image);
                        value =  this.chipshere;
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("The variable was not registered in the VAR protocol");}
                }
                {if ("" != null) return value;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Identifica orientaciones (:north, :south, :east, :west)
  final public String orientation() throws ParseException, Error {String direction= "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Identifica direcciones (:front, :right, :left, :back)
  final public String direction() throws ParseException, Error {String dir= "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
try
                {
                        dir += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading the direction !!");}
                }
                {if ("" != null) return dir;}
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
try
                {
                        dir += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading the direction !!");}
                }
                {if ("" != null) return dir;}
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
try
                {
                        dir += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading the direction !!");}
                }
                {if ("" != null) return dir;}
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
try
                {
                        dir += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading the direction !!");}
                }
                {if ("" != null) return dir;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Identifica direcciones de giro (:left, :right, :around)
  final public String turn() throws ParseException, Error {String direction= "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    case AROUND:{
      jj_consume_token(AROUND);
try
                {
                        direction += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error with the direction");}
                }
                {if ("" != null) return direction;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/* El nombre de una función es una cadena alfanumérica */
  final public String nombreFuncion() throws ParseException, Error {String nombre = "";
    jj_consume_token(NAME);
try
                        {
                                nombre += String.valueOf(token.image);
                        }
                        catch (Exception e)
                        {
                                {if (true) throw new Error("Error detected while reading variable !!");}
                        }
                        {if ("" != null) return nombre;}
    throw new Error("Missing return statement in function");
}

/* Los parámetros de una función son cadenas alfabéticas */
  final public String parametroFuncion() throws ParseException, Error {String parametro = "";
    jj_consume_token(NAME);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMS:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(NUMS);
    }
try
                {
                        parametro += String.valueOf(token.image);
                }
                catch (Exception e)
                {
                        {if (true) throw new Error("Error detected while reading variable !!");}
                }
                {if ("" != null) return parametro;}
    throw new Error("Missing return statement in function");
}

// TODO
// =================================================================================
// OPERACIÓN: Invocados para realizar las operaciones del robot
// =================================================================================

// Operación de dejar
  final public String put(boolean execute) throws ParseException {int f = 1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = numvar();
if(execute==true) {
        world.putChips(f);
        salida = "Command: Put Chips";
      }
      {if ("" != null) return "(put :chips " + Integer.toString(f) + ")";}
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = numvar();
if(execute==true) {
        world.putBalloons(f);
        salida = "Command: Put Balloons";
      }
      {if ("" != null) return "(put :balloons " + Integer.toString(f) + ")";}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Operación de recoger
  final public String get(boolean execute) throws ParseException {int f = 1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = numvar();
if(execute==true) {
        world.pickChips(f);
        salida = "Command: Put Chips";
      }
      {if ("" != null) return "(pick :chips " + Integer.toString(f) + ")";}
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = numvar();
if(execute==true) {
            world.grabBalloons(f);
            salida = "Command: Put Balloons";
      }
      {if ("" != null) return "(pick :balloons " + Integer.toString(f) + ")";}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// TODO
// =================================================================================
// VERIFICACIÓN: Invocados para realizar las verificaciones de estructura
// =================================================================================

// Verifican los bloques de comandos existentes (condicionales, funciones, loops...)
  final public void commandBlock(boolean execute) throws ParseException {
    if (jj_2_1(2)) {
      commandprotocol(execute);
    } else if (jj_2_2(2)) {
      conditionalprotocol();
    } else if (jj_2_3(2)) {
      funcion();
    } else if (jj_2_4(2)) {
      listaComandos(execute);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void listaComandos(boolean execute) throws ParseException {
    jj_consume_token(LBRACKET);
    label_3:
    while (true) {
      commandprotocol(execute);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RBRACKET);
}

  final public String commandprotocol(boolean execute) throws ParseException {int x,y;
        String namevar;
        String direction;
        String direccion;
        salida=new String();
        y = world.getFacing();
        String comando = "";
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFVAR:{
      jj_consume_token(DEFVAR);
      namevar = var();
      x = num();
if (!variableValues.containsKey(namevar)) {
                if(execute==true) {
                variableValues.put(namevar, x);
                }
        } else {
            System.out.println(salida="Ya existe una variable asociada con ese nombre");
        }
        comando = "(defvar " + namevar + " " + Integer.toString(x) + ")";
      break;
      }
    case EQUAL:{
      jj_consume_token(EQUAL);
      namevar = var();
      x = num();
if (variableValues.containsKey(namevar)) {
            if(execute==true) {
                variableValues.put(namevar, x);
                }
        } else {
            System.out.println(salida="No existe una variable asociada con ese nombre");
        }
        comando = "(= " + namevar + " " + Integer.toString(x) + ")";
      break;
      }
    case MOVE:{
      jj_consume_token(MOVE);
      x = numvar();
if(execute==true) {
                world.moveForward(x,false);salida = "Command: move ";
        }
        comando = "(move " + Integer.toString(x) + ")";
      break;
      }
    case HOP:{
      jj_consume_token(HOP);
      x = numvar();
if(execute==true) {
                world.moveForward(x,true);salida = "Command: skip ";
        }
        comando = "(skip " + Integer.toString(x) + ")";
      break;
      }
    case TURN:{
      jj_consume_token(TURN);
      direction = turn();
if (direction.equals(":right")) {
                if(execute==true) {
            world.turnRight();
            salida = "Turn right";
                 }
        } else if (direction.equals(":around")) {
                if(execute==true) {
            world.turnRight();
            world.turnRight();
            salida = "Turn around";
            }
        } else if (direction.equals(":left")) {
                if(execute==true) {
            world.turnRight();
            world.turnRight();
            world.turnRight();
            salida = "Turn left";
                }
        } else {
            salida = "Not valid";
        }
        comando = "(turn " + direction + ")";
      break;
      }
    case FACE:{
      jj_consume_token(FACE);
      direccion = orientation();
if(execute==true) {
                    if (direccion.equals(":north")) {
                        while (!world.facingNorth()) {
                            world.turnRight();
                        }
                        salida = "facing north";
                    } else if (direccion.equals(":south")) {
                        while (!world.facingSouth()) {
                            world.turnRight();
                        }
                        salida = "facing south";
                    } else if (direccion.equals(":west")) {
                        while (!world.facingWest()) {
                            world.turnRight();
                        }
                        salida = "facing west";
                    } else if (direccion.equals(":east")) {
                        while (!world.facingEast()) {
                            world.turnRight();
                        }
                        salida = "facing east";
                    } else {
                        salida = "Non valid command";
                    }
              }
              comando = "(face " + direccion + ")";
      break;
      }
    case MOVEDIR:{
      jj_consume_token(MOVEDIR);
      x = numvar();
      direction = direction();
if(execute==true) {
                    if (direction.equals(":right")) {
                        world.turnRight();
                        world.moveForward(x,false);
                        world.turnRight();world.turnRight();world.turnRight();
                        salida = "Move";
                    } else if (direction.equals(":back")) {
                        world.turnRight();world.turnRight();
                        world.moveForward(x,false);
                        world.turnRight();world.turnRight();
                        salida = "Move";
                    } else if (direction.equals(":left")) {
                        world.turnRight();world.turnRight();world.turnRight();
                        world.moveForward(x,false);
                        world.turnRight();
                        salida = "Move";
                    } else if (direction.equals(":front")) {
                        world.moveForward(x,false);
                        salida = "Move";
                    } else {
                        salida = "Non valid direction";
                    }
                 }
                 comando = "(move-dir " + Integer.toString(x) + " " + direction + ")";
      break;
      }
    case MOVEFACE:{
      jj_consume_token(MOVEFACE);
      x = numvar();
      direccion = orientation();
if(execute==true) {
            if (direccion.equals(":north")) {
                while (!world.facingNorth()) {
                    world.turnRight();
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";

                salida = "facing north";
            } else if (direccion.equals(":south")) {
                while (!world.facingSouth()) {
                    world.turnRight();
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";


            } else if (direccion.equals(":west")) {
                while (!world.facingWest()) {
                    world.turnRight();
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";

            } else if (direccion.equals(":east")) {
                while (!world.facingEast()) {
                    world.turnRight();
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";

            } else {
                salida = "Non valid command";
            }
            comando = "(move-face " + Integer.toString(x) + " " + direccion + ")";
         }
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
comando = "(null)";
      break;
      }
    case RUNDIRS:{
String direcciones = "";
      jj_consume_token(RUNDIRS);
      label_4:
      while (true) {
        direction = direction();
if(execute==true) {

                                    if (direction.equals(":right")) {
                                        world.turnRight();
                                        world.moveForward(1,false);
                                        salida = "move to the right";


                                    } else if (direction.equals(":back")) {
                                        world.turnRight();world.turnRight();
                                        world.moveForward(1,false);
                                        salida = "move to the back";

                                    } else if (direction.equals(":left")) {
                                        world.turnRight();world.turnRight();world.turnRight();
                                        world.moveForward(1,false);
                                        salida = "move to the left";

                                    } else if (direction.equals(":front")) {
                                        world.moveForward(1,false);
                                        salida = "move to the front";

                                    } else {
                                        salida = "Non valid direction";
                                    }


                                    if (y==0) {
                                        while (!world.facingNorth()) {
                                            world.turnRight();
                                        }
                                        salida = "facing north";
                                    } else if (y==1) {
                                        while (!world.facingSouth()) {
                                            world.turnRight();
                                        }
                                        salida = "facing south";
                                    } else if (y==2) {
                                        while (!world.facingWest()) {
                                            world.turnRight();
                                        }
                                        salida = "facing west";
                                    } else if (y==3) {
                                        while (!world.facingEast()) {
                                            world.turnRight();
                                        }
                                        salida = "facing east";
                                  }
                     }
                     direcciones += " " + direction + " ";
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RIGHT:
        case LEFT:
        case FRONT:
        case BACK:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
      }
comando = "(run-dirs " + direcciones + ")";
      break;
      }
    case PUT:{
      jj_consume_token(PUT);
      put(execute);
comando = put(execute);
      break;
      }
    case PICK:{
      jj_consume_token(PICK);
      get(execute);
comando = get(execute);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
{if ("" != null) return comando;}
    throw new Error("Missing return statement in function");
}

//Aqui se establece la estructura de un condicional, hasta el momento solo funciona con comandos
  final public String conditionalprotocol() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(IF);
    jj_consume_token(LBRACKET);
    condition();
    jj_consume_token(RBRACKET);
    jj_consume_token(LBRACKET);
    commandprotocol(this.boolexecuter);
    jj_consume_token(RBRACKET);
    jj_consume_token(LBRACKET);
    commandprotocol(!this.boolexecuter);
    jj_consume_token(RBRACKET);
    jj_consume_token(RBRACKET);
{if ("" != null) return "Condicional";}
    throw new Error("Missing return statement in function");
}

// Condición que interpreta un condicional y un loop
  final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:
    case BLOCKED:
    case CANPUT:
    case CANPICK:
    case CANMOVE:
    case ISZERO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FACING:{
        facing(false);
        break;
        }
      case ISZERO:{
        zero(false);
        break;
        }
      case CANPUT:{
        canput(false);
        break;
        }
      case CANPICK:{
        canpick(false);
        break;
        }
      case CANMOVE:{
        canmove(false);
        break;
        }
      case BLOCKED:{
        blocked(false);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FACING:{
        facing(true);
        break;
        }
      case ISZERO:{
        zero(true);
        break;
        }
      case CANPUT:{
        canput(true);
        break;
        }
      case CANPICK:{
        canpick(true);
        break;
        }
      case CANMOVE:{
        canmove(true);
        break;
        }
      case BLOCKED:{
        blocked(true);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LBRACKET);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void facing(boolean not) throws ParseException {String o;
    int actual;
    int comp;
    jj_consume_token(FACING);
    o = orientation();
actual = world.getFacing();
        comp = getNumCardinal(o);
        if (actual == comp) {
            this.boolexecuter = true;
        } else {
            this.boolexecuter = false;
        }
        if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
}

  final public void zero(boolean not) throws ParseException {int o;
    jj_consume_token(ISZERO);
    o = numvar();
if (o==0) {
            this.boolexecuter = true;
        }else {
                        this.boolexecuter = false;
           }

                if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
}

  final public void canput(boolean not) throws ParseException {int f=1;
                boolean can = true;
    jj_consume_token(CANPUT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = numvar();
Point p = world.getPosition();
                  if (world.chipExists(new Point(p.x, p.y+f-1))) {
                        can = false;
                     }
                  if (!(world.getN()-p.y >=f)) {
                        can = false;
                                 }
                  this.boolexecuter= can;
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = numvar();
this.boolexecuter= world.getMyBalloons()-f >= 0;
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
}

  final public void canpick(boolean not) throws ParseException {int f=1;
    jj_consume_token(CANPICK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      f = numvar();
Point p = world.getPosition();
                  if (world.chipExists(p) && f == 1) { this.boolexecuter= true; }
                  else { this.boolexecuter= false; }
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      f = numvar();
this.boolexecuter= world.countBalloons()-f >= 0;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
}

  final public void canmove(boolean not) throws ParseException {boolean can = true;
          String o;
          int wanted;
          Point actual;
          int x, y;

          o = null;
          wanted = 0;
          x = 0;
          y = 0;
    jj_consume_token(CANMOVE);
    o = orientation();
actual = world.getPosition();
                        Point pos = new Point(1, 1);

                        wanted = getNumCardinal(o);
                        x = (int)actual.getX();
                        y = (int)actual.getY();
                        System.out.println("Actual: "+actual);
                        System.out.println("pos: "+pos);
                        if (wanted == 0) {
                          pos.setLocation(x,y-1);}
                        else if (wanted == 1) {
                          pos.setLocation(x,y+1);}
                        else if (wanted == 2) {
                          pos.setLocation(x+1,y);}
                        else if (wanted == 3) {
                          pos.setLocation(x-1,y);}
                System.out.println("Trueval canJumpInDir: "+x);
                System.out.println("Trueval canJumpInDir: "+y);
                System.out.println("Trueval canJumpInDir: "+world.getN());
                System.out.println("Trueval canJumpInDir: "+pos);
                 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
                this.boolexecuter = false;


                 }else {
                                this.boolexecuter = !world.isBlocked(pos);
                        }

                    if (not == true) {
                this.boolexecuter = !this.boolexecuter;
                 }

                        System.out.println("Trueval canJumpInDir: "+this.boolexecuter);
}

  final public void blocked(boolean not) throws ParseException {boolean can = true;
          String o;
          int wanted;
          Point actual;
          int x, y;

          o = null;
          wanted = 0;
          x = 0;
          y = 0;
    jj_consume_token(BLOCKED);
actual = world.getPosition();
                        Point pos = new Point(1, 1);

                        wanted = world.getFacing();
                        x = (int)actual.getX();
                        y = (int)actual.getY();
                        System.out.println("Actual: "+actual);
                        System.out.println("pos: "+pos);
                        if (wanted == 0) {
                          pos.setLocation(x,y-1);}
                        else if (wanted == 1) {
                          pos.setLocation(x,y+1);}
                        else if (wanted == 2) {
                          pos.setLocation(x+1,y);}
                        else if (wanted == 3) {
                          pos.setLocation(x-1,y);}
                System.out.println("Trueval canJumpInDir: "+x);
                System.out.println("Trueval canJumpInDir: "+y);
                System.out.println("Trueval canJumpInDir: "+world.getN());
                System.out.println("Trueval canJumpInDir: "+pos);
                 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
                this.boolexecuter = true;


                 }else {
                                this.boolexecuter = world.isBlocked(pos);
                        }

                    if (not == true) {
                this.boolexecuter = !this.boolexecuter;
                 }

                        System.out.println("Trueval canJumpInDir: "+this.boolexecuter);
}

/* Estructura de función es (defun nombre (params) (c1)(c2)...(cn))*/
  final public String funcion() throws ParseException {String nombreFun;
  String parametro;
  ArrayList<String> parametros = new ArrayList<String>();
  ArrayList<String> comandos = new ArrayList<String>();
    jj_consume_token(LBRACKET);
    jj_consume_token(DEFUN);
    nombreFun = nombreFuncion();
procNames.add(nombreFun);
    parametros = listaParametros();
procParams.put(nombreFun, parametros);
    System.out.println(procParams);
    jj_consume_token(LBRACKET);
    label_5:
    while (true) {
      commandBlock(false);
comandos.add(token_source.toString());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
    }
System.out.println(comandos);
    jj_consume_token(RBRACKET);
procBloques.put(nombreFun, comandos);
    System.out.println(procBloques);
    jj_consume_token(RBRACKET);
{if ("" != null) return "funcion";}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> listaParametros() throws ParseException {String v = "";
  ArrayList<String> params = new ArrayList<String>();
    jj_consume_token(LBRACKET);
    v = var();
variablesAuxiliares.add(v);
    params.add(v);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      v = var();
variablesAuxiliares.add(v);
    params.add(v);
    }
    jj_consume_token(RBRACKET);
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
}

// TODO
// =================================================================================
// AUXILIARES: Invocadas para ayudar a otros métodos
// =================================================================================
  final public 
int getNumCardinal(String o) throws ParseException {int numCardinal;
  numCardinal=0;
if (o.equals(":north")) {
          numCardinal = 0; }
        else if (o.equals(":south")) {
          numCardinal = 1; }
        else if (o.equals(":east")) {
          numCardinal = 2; }
        else if (o.equals(":west")) {
          numCardinal = 3; }
        {if ("" != null) return numCardinal;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_commandprotocol_626_9_7()) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_641_11_12()
 {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_857_28_22()
 {
    if (jj_scan_token(PICK)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_726_16_17()
 {
    if (jj_scan_token(MOVEDIR)) return true;
    return false;
  }

  private boolean jj_3R_funcion_1115_3_9()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(DEFUN)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_854_28_21()
 {
    if (jj_scan_token(PUT)) return true;
    return false;
  }

  private boolean jj_3R_conditionalprotocol_871_3_8()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_629_7_11()
 {
    if (jj_scan_token(DEFVAR)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_626_9_7()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_commandprotocol_629_7_11()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_641_11_12()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_653_11_13()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_661_11_14()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_670_10_15()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_696_18_16()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_726_16_17()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_754_16_18()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_792_24_19()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_798_21_20()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_854_28_21()) {
    jj_scanpos = xsp;
    if (jj_3R_commandprotocol_857_28_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_commandprotocol_670_10_15()
 {
    if (jj_scan_token(TURN)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_798_21_20()
 {
    if (jj_scan_token(RUNDIRS)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_754_16_18()
 {
    if (jj_scan_token(MOVEFACE)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_792_24_19()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_661_11_14()
 {
    if (jj_scan_token(HOP)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_696_18_16()
 {
    if (jj_scan_token(FACE)) return true;
    return false;
  }

  private boolean jj_3R_commandprotocol_653_11_13()
 {
    if (jj_scan_token(MOVE)) return true;
    return false;
  }

  private boolean jj_3R_listaComandos_610_4_23()
 {
    if (jj_3R_commandprotocol_626_9_7()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_listaComandos_609_3_10()) return true;
    return false;
  }

  private boolean jj_3R_listaComandos_609_3_10()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    if (jj_3R_listaComandos_610_4_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_listaComandos_610_4_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_funcion_1115_3_9()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_conditionalprotocol_871_3_8()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x1,0x1fc0000,0x3c000,0x1e0,0x260,0x0,0xc00,0xc00,0x0,0x1e0,0xfc000000,0x0,0x0,0x0,0xc00,0xc00,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x80,0x80,0xa0000,0x0,0x0,0x0,0x80000,0x0,0x0,0x80,0x0,0x3f,0xfc00,0xfc00,0x1fc00,0x0,0x0,0x80,0x20000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[55];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 55; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
