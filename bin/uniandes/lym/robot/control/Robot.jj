/* Proyecto 1 LyM. Realizado por:
Carol Florido - 202111430
Nicolás Rincón - 202021963 */

/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{
	public boolean boolexecuter = true;
	public Map<String, Object> variableValues = new HashMap<>();
	public ArrayList<String> variablesAuxiliares = new ArrayList<>();
	public Map<String, Integer> diccionarioAuxiliar = new HashMap<>();
	public Map<String, ArrayList<String>> procParams = new HashMap<>();
	public Map<String, ArrayList<String>> procBloques = new HashMap<>();
	public ArrayList<String> procNames = new ArrayList<>();
	public ArrayList<String> instrucciones = new ArrayList<>();
	int chipshere;
	public static int contadorAuxiliar = 0;
	public boolean dentroFuncion = false;

	private RobotWorldDec world;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}

PARSER_END(Robot)

SKIP:
{
	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN: /* Direcciones */
{
	< RIGHT: ":right" >
	| < LEFT: ":left" >
	| < FRONT: ":front" >
	| < BACK: ":back" >
	| < AROUND: ":around" >
}

TOKEN: /* Elementos */
{
	< BALLOONS: ":balloons" >
	| < CHIPS: ":chips"  >
}

TOKEN: /* Ciclos */
{
	< REPEAT:  "repeat" >
	| < LOOP: "loop" >
}

TOKEN: /* Orientaciones */
{
  	  < NORTH: ":north" >
	| < SOUTH: ":south" >
	| < EAST: ":east" >
	| < WEST: ":west" >
}

TOKEN: /* Constantes */
{
  	  < DIM: "Dim" >
	| < MYXPOS: "myXpos" >
	| < MYYPOS: "myYpos" >
	| < MYCHIPS: "myChips" >
	| < MYBALLOONS: "myBalloons" >
	| < BALLOONSHERE: "balloonsHere" >
	| < CHIPSHERE: "chipsHere" >
	| < SPACES: "Spaces" >
}

TOKEN: /* Comandos */
{
	< MOVE:  "move">
	| < EQUAL: "=">
	| < DEFVAR: "defvar">
	| < TURN: "turn">
	| < FACE: "face">
	| < MOVEDIR: "move-dir">
	| < RUNDIRS: "run-dirs">
	| < MOVEFACE: "move-face">
	| < NULL: "null">
	| < PUT: "put">
	| < PICK: "pick" >
    | < HOP:  "skip" >	
	| < DEFUN: "defun" >
}

TOKEN: /* Reservados */
{
	 < LBRACKET: "(" >
	| < RBRACKET: ")" >       
}

TOKEN: /* Condicionales */
{
  	  <IF: "if">
	| < FACING: "facing?" >
	| < BLOCKED: "blocked?" >
	| < CANPUT: "can-put?" >
	| < CANPICK: "can-pick?" >
	| < CANMOVE: "can-move?" >
	| < ISZERO: "isZero?" >
	| < NOT: "not" >
}

TOKEN: /* Alfabeto de letras */
{
  <NAME : (< LETTER >)+ >
| < #LETTER   : ["a"-"z","A"-"Z"] >
}

TOKEN: /* Alfabeto de números */
{
 < NUM : (< DIGIT >)+ >
| < #DIGIT : ["0"-"9"] >
|   < #INITIALDIGIT: ["1"-"9"]>
}

// TODO
// =================================================================================
// PRINCIPAL: La que es invocada desde el Interpreter para hacer todo el parsing
// =================================================================================
boolean command(Console sistema):
{}
{
	(
	  //Asegura la ejecución de bloques lógicos individuales
	  commandBlock(true)
	 {
	    try {
	      //Emplea concurrencia para dormir el Thread y que se pueda ver en el dibujo
    		Thread.sleep(700);
    	    } catch (InterruptedException e) {
    		System.err.format("IOException: %s%n", e);
    		    }		 
		sistema.printOutput(salida);
		return true;
	})+
	| <EOF> {return false;} 
}

// TODO
// =================================================================================
// LECTURA: Invocados para lanzar errores de lectura del parser
// =================================================================================

// Identifica números sobre el programa
int num() throws Error:
{	
	int total=1;
}
{
	<NUM>
	{
		try 
		{
			total = Integer.parseInt(token.image);
		} 
		catch (NumberFormatException ee) 
		{
			throw new Error("Number out of bounds: "+token.image+" !!");
		}
		return total;
	}
}

// Identifica variables/nombres sobre el programa
String var() throws Error:
{	
	String name= "";
}
{
	<NAME>
	{
		try 
		{
			name += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading variable !!");
		}
		return name;
	}
}

// Identifica números constantes y/o valores numéricos de variables
int numvar() throws Error:
{	
	int value= 0;
	String name;
	
}
{
	<NUM>
	{
		try 
		{
			value = Integer.parseInt(token.image);
		} 
		catch (NumberFormatException ee) 
		{
			throw new Error("Number out of bounds: "+token.image+" !!");
		}
		return value;
	}
	
|   < NAME>
{
		try 
		{
			name = String.valueOf(token.image);
			if (!variablesAuxiliares.contains(name)) {
			  value = (int)variableValues.get(name);
			} else { 
			  value = (int)diccionarioAuxiliar.get(name);
			}
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <DIM>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  world.getN();
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <MYXPOS>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  (int) world.getPosition().getX();
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <MYYPOS>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  (int) world.getPosition().getY();
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <MYCHIPS>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  (int) world.getMyChips();
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <MYBALLOONS>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  (int) world.getMyBalloons();
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
|   <BALLOONSHERE>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  world.countBalloons();
		} 
		catch (Exception e) 
		{
		}
		return value;
	}
|   <CHIPSHERE>
{
		try 
		{
			name = String.valueOf(token.image);
			value =  this.chipshere;
		} 
		catch (Exception e) 
		{
			throw new Error("The variable was not registered in the VAR protocol");
		}
		return value;
	}
}

// Identifica orientaciones (:north, :south, :east, :west)
String orientation() throws Error:
{	
	String direction= "";
}
{
< NORTH >{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
|< SOUTH >{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
|< WEST >
	{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
|< EAST >
	{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
}

// Identifica direcciones (:front, :right, :left, :back)
String direction() throws Error:
{	
	String dir= "";
}
{
< RIGHT >{
		try 
		{
			dir += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading the direction !!");
		}
		return dir;
	}
|< LEFT >{
		try 
		{
			dir += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading the direction !!");
		}
		return dir;
	}
|< FRONT >
	{
		try 
		{
			dir += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading the direction !!");
		}
		return dir;
	}
|< BACK >
	{
		try 
		{
			dir += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading the direction !!");
		}
		return dir;
	}
}

// Identifica direcciones de giro (:left, :right, :around)
String turn() throws Error:
{	
	String direction= "";
}
{
< RIGHT >{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
|< LEFT >{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
|< AROUND >
	{
		try 
		{
			direction += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error with the direction");
		}
		return direction;
	}
}

/* El nombre de una función es una cadena alfanumérica */
String nombreFuncion() throws Error:
	{	
		String nombre = "";
	}
	{
		<NAME>
		{
			try 
			{
				nombre += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading variable !!");
			}
			return nombre;
		}
	}

/* Los parámetros de una función son cadenas alfabéticas */
String parametroFuncion() throws Error:
{	
	String parametro = "";
}
{
	<NAME>(< NUM >)*
	{
		try 
		{
			parametro += String.valueOf(token.image);
		} 
		catch (Exception e) 
		{
			throw new Error("Error detected while reading variable !!");
		}
		return parametro;
	}
}

// TODO
// =================================================================================
// OPERACIÓN: Invocados para realizar las operaciones del robot
// =================================================================================

// Operación de dejar
String put(boolean execute) :
{
    int f = 1;    
}  
{
    <CHIPS> f = numvar()
    {
      if(execute==true) {
        world.putChips(f);
        salida = "Command: Put Chips";
      }
      return "(put :chips " + Integer.toString(f) + ")";
    }
    | <BALLOONS> f = numvar()
    {
      if(execute==true) {
        world.putBalloons(f);
        salida = "Command: Put Balloons";
      }
      return "(put :balloons " + Integer.toString(f) + ")";
    }
}


// Operación de recoger
String get(boolean execute) :
{
    int f = 1;    
}
{
    <CHIPS> f = numvar()
    {
	  if(execute==true) {
      	world.pickChips(f);
      	salida = "Command: Put Chips";
      }
      return "(pick :chips " + Integer.toString(f) + ")";
    }
    | <BALLOONS> f = numvar()
    {
	  if(execute==true) {
	    world.grabBalloons(f);
	    salida = "Command: Put Balloons";
      }
      return "(pick :balloons " + Integer.toString(f) + ")";
    }
}

// TODO
// =================================================================================
// VERIFICACIÓN: Invocados para realizar las verificaciones de estructura
// =================================================================================

// Verifican los bloques de comandos existentes (condicionales, funciones, loops...)
void commandBlock(boolean execute) :
{instrucciones.clear();}
{
	LOOKAHEAD(2) commandprotocol(execute)
	| LOOKAHEAD(2) conditionalprotocol()
	| LOOKAHEAD(2) funcion()
	| LOOKAHEAD(2) listaComandos(execute)
	| LOOKAHEAD(2) repeat()
}


void listaComandos(boolean execute):
{}
{
  < LBRACKET >
  (commandprotocol(execute))+
  < RBRACKET >
}

String commandprotocol(boolean execute) :
{
	int x = -1;
	int y;
	String namevar="";
	String direction="";
	String direccion="";
	salida=new String();
	y = world.getFacing();
	String comando = "";
	String vparam = "";
}
{
	// Todo comando es una declaración encerrada en paréntesis
  	<LBRACKET>
    // Crear variables
    (
      <DEFVAR> namevar=var() (x=num()|vparam=direction()|vparam=turn()|vparam=orientation()|vparam=var())
    {
        if (!variableValues.containsKey(namevar)) {
          	if(execute==true) {
          	  if ((x!=-1)&&(vparam.toString()=="")) { 
            	variableValues.put(namevar, x);
           		}
           	  else if ((x==-1)&&(vparam.toString()!="")) {
           	    variableValues.put(namevar, vparam.toString());
           	  }
          	}
          	else {
          	  if ((x!=-1)&&(vparam.toString()=="")) { 
            	variablesAuxiliares.add(namevar);
           		}
           	  else if ((x==-1)&&(vparam.toString()!="")) {
           	    variablesAuxiliares.add(vparam.toString());
           	  }
          	}
        } else {
            System.out.println(salida="Ya existe una variable asociada con ese nombre");
        }
        if (x==-1) { 
        comando = "(defvar " + namevar + " " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(defvar " + namevar + " " + Integer.toString(x) + ")"; }
    }
  	 // Reasignar variables
 	| <EQUAL> namevar=var() (x=num()|vparam=direction()|vparam=turn()|vparam=orientation()|vparam=var())
  	{
        if (variableValues.containsKey(namevar)) {
            if(execute==true) { 
          	  if ((x!=-1)&&(vparam.toString()=="")) { 
            	variableValues.put(namevar, x);
           		}
           	  else if ((x==-1)&&(vparam.toString()!="")) {
           	    variableValues.put(namevar, vparam);
           	  }
          	}
        } else {
            System.out.println(salida="No existe una variable asociada con ese nombre");
        }
        if (x==-1) { 
        comando = "(= " + namevar + " " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(= " + namevar + " " + Integer.toString(x) + ")"; }
    }
   	 // moverse
 	| <MOVE> x=numvar()
  	{
  	  	if(execute==true) { 
        	world.moveForward(x,false);salida = "Command: move ";
        }
        if (vparam=="") {
        comando = "(move " + Integer.toString(x) + ")"; }
    }
	  
   	 // saltar
 	| <HOP> x=numvar()
  	{
  	 	if(execute==true) { 
        	world.moveForward(x,true);salida = "Command: skip ";
        }
        comando = "(skip " + Integer.toString(x) + ")"; }{
        
    }

	// Girar
	|<TURN> (direction = turn()|vparam=var())
    {
      if (variableValues.containsKey(vparam)) { 
        if (direction.equals(":right")||variableValues.get(vparam).equals(":right")) {
          	if(execute==true) { 
            world.turnRight(); 
            salida = "Turn right";
         	 }
        } else if (direction.equals(":around")||variableValues.get(vparam).equals(":around")) {
         	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn around";
            }
        } else if (direction.equals(":left")||variableValues.get(vparam).equals(":left")) {
          	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn left";
          	}
        } else { 
            salida = "Not valid"; 
        }
      } else {
        if (direction.equals(":right")) {
          	if(execute==true) { 
            world.turnRight(); 
            salida = "Turn right";
         	 }
        } else if (direction.equals(":around")) {
         	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn around";
            }
        } else if (direction.equals(":left")) {
          	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn left";
          	}
        } else { 
            salida = "Not valid"; 
        }
      }
        if (direction=="") { 
        comando = "(turn " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(turn " + direction + ")"; }
    }

    // Mirar 
	|	 <FACE>  (direccion = orientation()|vparam=var())
    {
      if (variableValues.containsKey(vparam)) {
       		if(execute==true) {
	            if (direccion.equals(":north")||variableValues.get(vparam).equals(":north")) {
	                while (!world.facingNorth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing north";
	            } else if (direccion.equals(":south")||variableValues.get(vparam).equals(":south")) {
	                while (!world.facingSouth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing south";
	            } else if (direccion.equals(":west")||variableValues.get(vparam).equals(":west")) {
	                while (!world.facingWest()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing west";
	            } else if (direccion.equals(":east")||variableValues.get(vparam).equals(":east")) {
	                while (!world.facingEast()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing east";
	            } else {
	                salida = "Non valid command";
	            }
	      }
	    }
	    else {
	      if(execute==true) {
	            if (direccion.equals(":north")) {
	                while (!world.facingNorth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing north";
	            } else if (direccion.equals(":south")) {
	                while (!world.facingSouth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing south";
	            } else if (direccion.equals(":west")) {
	                while (!world.facingWest()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing west";
	            } else if (direccion.equals(":east")) {
	                while (!world.facingEast()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing east";
	            } else {
	                salida = "Non valid command";
	            }
	          }
	        }
	      
	      if (direccion=="") { 
        comando = "(face " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(face " + direction + ")"; }
    }
	// Moverse en una direccion 
	    |  < MOVEDIR> x=numvar() (direction = direction()|vparam=var()){
	   if (variableValues.containsKey(vparam)) {   
	      if(execute==true) {
		    if (direction.equals(":right")||variableValues.get(vparam).equals(":right")) {
		        world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":back")||variableValues.get(vparam).equals(":back")) {
		        world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":left")||variableValues.get(vparam).equals(":left")) {
		        world.turnRight();world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":front")||variableValues.get(vparam).equals(":front")) {
		        world.moveForward(x,false);
		        salida = "Move";
		    } else {
		        salida = "Non valid direction";
		    }
		 }
	} else {
	  if(execute==true) {
		    if (direction.equals(":right")) {
		        world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":back")) {
		        world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":left")) {
		        world.turnRight();world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":front")) {
		        world.moveForward(x,false);
		        salida = "Move";
		    } else {
		        salida = "Non valid direction";
		    }
		 }
	}
		 if (direction=="") { 
        comando = "(move-dir " + Integer.toString(x) + " " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(move-dir " + Integer.toString(x) + " " + direction + ")"; }
		 
	}
		  
	// Move face
	    |  < MOVEFACE> x=numvar() (direccion= orientation()|vparam=var()){
		if (variableValues.containsKey(vparam)) {
	      if(execute==true) {
            if (direccion.equals(":north")||variableValues.get(vparam).equals(":north")) {
                while (!world.facingNorth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
                salida = "facing north";
            } else if (direccion.equals(":south")||variableValues.get(vparam).equals(":south")) {
                while (!world.facingSouth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
           
            } else if (direccion.equals(":west")||variableValues.get(vparam).equals(":west")) {
                while (!world.facingWest()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else if (direccion.equals(":east")||variableValues.get(vparam).equals(":east")) {
                while (!world.facingEast()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else {
                salida = "Non valid command";
            }
          }
        } else {
          if(execute==true) {
            if (direccion.equals(":north")) {
                while (!world.facingNorth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
                salida = "facing north";
            } else if (direccion.equals(":south")) {
                while (!world.facingSouth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
           
            } else if (direccion.equals(":west")) {
                while (!world.facingWest()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else if (direccion.equals(":east")) {
                while (!world.facingEast()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else {
                salida = "Non valid command";
            }
          }
        }
        if (direccion=="") { 
        	comando = "(move-face " + Integer.toString(x) + " " + vparam.toString() + ")"; }
        if (vparam=="") {
        comando = "(move-face " + Integer.toString(x) + " " + direccion + ")"; }
         
         
        }
     // null 

		    |  < NULL>
		    { comando = "(null)"; }
		    
     // Moverse de acuerdo a una lista de direcciones

		    |
		    { String direcciones = ""; }
		    <RUNDIRS> (direction = direction()|vparam=var(){
		if (variableValues.containsKey(vparam)) {      
		      if(execute==true) {

				    if (direction.equals(":right")||variableValues.get(vparam).equals(":right")) {
				        world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the right";
				        
	
				    } else if (direction.equals(":back")||variableValues.get(vparam).equals(":back")) {
				        world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the back";
	
				    } else if (direction.equals(":left")||variableValues.get(vparam).equals(":left")) {
				        world.turnRight();world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the left";
	
				    } else if (direction.equals(":front")||variableValues.get(vparam).equals(":front")) {
				        world.moveForward(1,false);
				        salida = "move to the front";
	
				    } else {
				        salida = "Non valid direction";
				    }
	
	
				    if (y==0) {
			                while (!world.facingNorth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing north";
			            } else if (y==1) {
			                while (!world.facingSouth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing south";
			            } else if (y==2) {
			                while (!world.facingWest()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing west";
			            } else if (y==3) {
			                while (!world.facingEast()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing east";
			          }
		     }
		   } else {
		     if(execute==true) {

				    if (direction.equals(":right")) {
				        world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the right";
				        
	
				    } else if (direction.equals(":back")) {
				        world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the back";
	
				    } else if (direction.equals(":left")) {
				        world.turnRight();world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the left";
	
				    } else if (direction.equals(":front")) {
				        world.moveForward(1,false);
				        salida = "move to the front";
	
				    } else {
				        salida = "Non valid direction";
				    }
	
	
				    if (y==0) {
			                while (!world.facingNorth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing north";
			            } else if (y==1) {
			                while (!world.facingSouth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing south";
			            } else if (y==2) {
			                while (!world.facingWest()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing west";
			            } else if (y==3) {
			                while (!world.facingEast()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing east";
			          }
		     }
		   }
		if (direction=="") { 
        	direcciones += " " + vparam.toString() + " "; }
        if (vparam=="") {
        	direcciones += " " + direction + " "; }
         
		     
		    }
		    )+
		    { comando = "(run-dirs " + direcciones + ")"; }
	
		    // put protocol
			|  <PUT> put(execute)
			{ comando = put(execute); }
			// pick protocol			  			
			|  <PICK> get(execute)
			{ comando = get(execute); }
	)
	< RBRACKET >
	{
	  instrucciones.add(comando);
	  return comando;
	}
}


//Aqui se establece la estructura de un condicional, hasta el momento solo funciona con comandos
void conditionalprotocol():
{}
{
  < LBRACKET >
  <IF>
  <LBRACKET>condition()<RBRACKET>
  commandBlock(this.boolexecuter)
  commandBlock(!this.boolexecuter)
  < RBRACKET >
}
	
// Condición que interpreta un condicional y un loop
void condition():
{}
{
    (
        facing(false)
        | zero(false)
        | canput(false)
        | canpick(false)
        | canmove(false)
        | blocked(false)

    )
    |
    (
    <NOT> <LBRACKET> (
        facing(true)
        | zero(true)
        | canput(true)
        | canpick(true)
        | canmove(true)
        | blocked(true)
    )
    <RBRACKET>
    )
}

void facing(boolean not):
{
    String o;
    int actual;
    int comp;
}
{
    <FACING> o = orientation()
    {
        actual = world.getFacing();
        comp = getNumCardinal(o);
        if (actual == comp) {
            this.boolexecuter = true;
        } else {
            this.boolexecuter = false;
        }
        if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
    }
}
	
void zero(boolean not):
	{
		int o;
	}
	{
	  < ISZERO > o=numvar()
	  {
	    if (o==0) {
            this.boolexecuter = true;
        }else {
			this.boolexecuter = false;
           }
        
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
	 }
	}
	
void canput(boolean not) :
	{
		int f=1;
		boolean can = true;	
	}
	{
		<CANPUT>
		( <CHIPS> f=numvar(){
		  Point p = world.getPosition();
		  if (world.chipExists(new Point(p.x, p.y+f-1))) {
		    	can = false;
		     }
		  if (!(world.getN()-p.y >=f)) {
		    	can = false;
				 }
		  this.boolexecuter= can; }
		| <BALLOONS> f=numvar(){ this.boolexecuter= world.getMyBalloons()-f >= 0; })
		{
		          
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
		}	 
	}

void canpick(boolean not) :
	{
		int f=1;
	}
	{
		<CANPICK>
		( <CHIPS> f=numvar(){
		  Point p = world.getPosition();
		  if (world.chipExists(p) && f == 1) { this.boolexecuter= true; }
		  else { this.boolexecuter= false; }
		  }
		| <BALLOONS> f=numvar(){ this.boolexecuter= world.countBalloons()-f >= 0; })

		{          
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
		}	 
	}
void canmove(boolean not):
	{

	  boolean can = true;
	  String o;
	  int wanted;
	  Point actual;
	  int x, y;
	  		
	  o = null; 
	  wanted = 0; 
	  x = 0;
	  y = 0;

	}
	{
	  <CANMOVE> o=orientation() {
		    actual = world.getPosition();
			Point pos = new Point(1, 1);

		  	wanted = getNumCardinal(o);
		  	x = (int)actual.getX();
		  	y = (int)actual.getY();
		  	System.out.println("Actual: "+actual);
		  	System.out.println("pos: "+pos);
		  	if (wanted == 0) {
		  	  pos.setLocation(x,y-1);}
		  	else if (wanted == 1) {
		  	  pos.setLocation(x,y+1);}
		  	else if (wanted == 2) {
		  	  pos.setLocation(x+1,y);}
		  	else if (wanted == 3) {
		  	  pos.setLocation(x-1,y);}	  	  
       		 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
            	this.boolexecuter = false;

            	
       		 }else { 
		  		this.boolexecuter = !world.isBlocked(pos);
			}
       		 
		    if (not == true) {
            	this.boolexecuter = !this.boolexecuter;
       		 }		
		  }
	}

void blocked(boolean not):
	{
	  boolean can = true;
	  String o;
	  int wanted;
	  Point actual;
	  int x, y;
	  		
	  o = null; 
	  wanted = 0; 
	  x = 0;
	  y = 0;

	}
	{
	  <BLOCKED>  {
		    actual = world.getPosition();
			Point pos = new Point(1, 1);

		  	wanted = world.getFacing();
		  	x = (int)actual.getX();
		  	y = (int)actual.getY();
		  	System.out.println("Actual: "+actual);
		  	System.out.println("pos: "+pos);
		  	if (wanted == 0) {
		  	  pos.setLocation(x,y-1);}
		  	else if (wanted == 1) {
		  	  pos.setLocation(x,y+1);}
		  	else if (wanted == 2) {
		  	  pos.setLocation(x+1,y);}
		  	else if (wanted == 3) {
		  	  pos.setLocation(x-1,y);}	  	  
       		 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
            	this.boolexecuter = true;

            	
       		 }else { 
		  		this.boolexecuter = world.isBlocked(pos);
			}
       		 
		    if (not == true) {
            	this.boolexecuter = !this.boolexecuter;
       		 }

		  	System.out.println("Trueval canJumpInDir: "+this.boolexecuter);

		
		  }
	}
	
/* Estructura de función es (defun nombre (params) (c1)(c2)...(cn))*/
String funcion() throws Error:
{
  String nombreFun;
  String parametro;
  ArrayList<String> parametros = new ArrayList<String>();
  ArrayList<String> comandos = new ArrayList<String>();
  dentroFuncion = true;
}
{
  < LBRACKET >
  < DEFUN > nombreFun = nombreFuncion()
  {
    if (!procNames.contains(nombreFun)) {
      procNames.add(nombreFun);
    }
    else {
      throw new Error("Ya está definida una función con ese nombre");
    }
  }
  (    parametros = listaParametros()
  )
  {
    procParams.put(nombreFun, parametros);
    System.out.println(procParams);
  }
    (
    commandBlock(false)
    {
      for (String s: instrucciones) {
        comandos.add(s);
      }
    }
  )+
  {
    System.out.println(comandos);
    procBloques.put(nombreFun, comandos);
    System.out.println(procBloques);
  }
  < RBRACKET >
  {
    for (String p: parametros) {
      variablesAuxiliares.remove(p);
    }
    dentroFuncion = false;
    return "funcion";
  }
}

ArrayList<String> listaParametros():
{
  String v = "";
  ArrayList<String> params = new ArrayList<String>();
}
{
  < LBRACKET >
  (v = var()
  {
    variablesAuxiliares.add(v);
    variableValues.put(v,v);
    if (!diccionarioAuxiliar.containsKey(v))
    {
    contadorAuxiliar-=1;
    diccionarioAuxiliar.put(v, contadorAuxiliar);
    }
    params.add(v);
  })*
  < RBRACKET >
  {
    return params;
  }
}
	
void repeat():
{
  int n;
  ArrayList<String> comandos = new ArrayList<String>();
}
{
  < LBRACKET >
  < REPEAT > n=numvar() (commandBlock(false)
  	{
      for (String s: instrucciones) {
        comandos.add(s);
      }
    })+
  < RBRACKET >
  {
    while (n > 0) {
      ejecutar_comandos(comandos, null);
      n--;
    }
}
}


// TODO
// =================================================================================
// AUXILIARES: Invocadas para ayudar a otros métodos
// =================================================================================

int getNumCardinal(String o):
{
  int numCardinal;
  numCardinal=0;
}
{
  { 
  	if (o.equals(":north")) {
  	  numCardinal = 0; }
  	else if (o.equals(":south")) {
  	  numCardinal = 1; }
  	else if (o.equals(":east")) {
  	  numCardinal = 2; }
  	else if (o.equals(":west")) {
  	  numCardinal = 3; }
  	return numCardinal;
  	}
 }

void ejecutar_comandos(ArrayList<String> comandos, String funcion):
// Usado para ejecución de bloques almacenados en memoria -> Funciones y Ciclos
{
  ArrayList<String> parametros = new ArrayList<>();
}
{
  {
    
    for (String comando : comandos)
    {
      String[] separado = comando.split(" ");
      // Caso Move
      if (separado[0].equals("(move"))
      {
        String valor = separado[1].substring(0,1);
        world.moveForward(Integer.valueOf(valor),false);
      }
      // Caso Skip
      else if (separado[0].equals("(skip"))
      {
        String valor = separado[1].substring(0,1);
        world.moveForward(Integer.valueOf(valor),true);
      }
      // Caso Turn
      else if (separado[0].equals("(turn"))
      {
        String valor = separado[1];
        if (valor.equals(":right)")) {
            world.turnRight();
            
        } else if (valor.equals(":around)")) {
            world.turnRight(); 
            world.turnRight();
            
        } else if (valor.equals(":left)")) {
            world.turnRight(); 
            world.turnRight(); 
            world.turnRight();
        }
      }
      // Caso Face
      else if (separado[0].equals("(face"))
      {
        String valor = separado[1];
        if (valor.equals(":north)")) {
            while (!world.facingNorth()) { 
	                    world.turnRight(); 
	                }
            
        } else if (valor.equals(":south)")) {
            while (!world.facingSouth()) { 
	                    world.turnRight(); 
	                }
            
        } else if (valor.equals(":west)")) {
            while (!world.facingWest()) { 
	                    world.turnRight(); 
	                }
        } else if (valor.equals(":east)")) {
            while (!world.facingEast()) { 
	                    world.turnRight(); 
	                }
        }
        // Acá irian otros casos
      }
    }
  }
}
