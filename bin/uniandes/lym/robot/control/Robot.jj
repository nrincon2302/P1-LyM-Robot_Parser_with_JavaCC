/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{
	public boolean boolexecuter = true;
	public Map<String, Integer> variableValues = new HashMap<>();
	public ArrayList<String> variablesAuxiliares = new ArrayList<>();
	public Map<String, ArrayList<String>> procParams = new HashMap<>();
	public Map<String, ArrayList<String>> procBloques = new HashMap<>();
	public ArrayList<String > strct_tokens = new ArrayList <String>();
	int chipshere;

	private RobotWorldDec world;
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}

PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Direcciones */
{
	< RIGHT: ":right" >
	| < LEFT: ":left" >
	| < FRONT: ":front" >
	| < BACK: ":back" >
	| < AROUND: ":around" >
}

TOKEN:
{
	< BALLOONS: ":balloons" >
	| < CHIPS: ":chips"  >
}

TOKEN:
{
	< REPEAT:  "repeat" >
	| < LOOP: "loop" >
}

TOKEN: /* orientaciones */
{
  	  < NORTH: ":north" >
	| < SOUTH: ":south" >
	| < EAST: ":east" >
	| < WEST: ":west" >
}

TOKEN: /* constantes */
{
  	  < DIM: "Dim" >
	| < MYXPOS: "myXpos" >
	| < MYYPOS: "myYpos" >
	| < MYCHIPS: "myChips" >
	| < MYBALLOONS: "myBalloons" >
	| < BALLOONSHERE: "balloonsHere" >
	| < CHIPSHERE: "ChipsHere" >
	| < SPACES: "Spaces" >
}

TOKEN: /* Commandos */
{
	< MOVE:  "move">
	| < EQUAL: "=">
	| < DEFVAR: "defvar">
	| < TURN: "turn">
	| < FACE: "face">
	| < MOVEDIR: "move-dir">
	| < RUNDIRS: "run-dirs">
	| < MOVEFACE: "move-face">
	| < NULL: "null">
	| < PUT: "put">
	| < PICK: "pick" >
    | < HOP:  "skip" >	
	| < DEFUN: "defun" >
}

TOKEN :
{
	 < RBRACKET: ")" >
	| < LBRACKET: "(" >       
}

TOKEN: /*Condicionales*/
{
  	  <IF: "if">
	| < FACING: "facing?" >
	| < BLOCKED: "blocked?" >
	| < CANPUT: "can-put?" >
	| < CANPICK: "can-pick?" >
	| < CANMOVE: "can-move?" >
	| < ISZERO: "isZero?" >
	| < NOT: "not" >
}

TOKEN :
{
  <NAME : (< LETTER >)+ >
| < #LETTER   : ["a"-"z","A"-"Z"] >
}

TOKEN :
{
  < NUMS: ((< INITIALDIGIT >)(< DIGIT >)*)|(< DIGIT >) >
|  < NUM : (< DIGIT >)+ >
| < #DIGIT : ["0"-"9"] >
|   < #INITIALDIGIT: ["1"-"9"]>
}

// =================================================================================
// PRINCIPAL: La que es invocada desde el Interpreter para hacer todo el parsing
// =================================================================================
boolean command(Console sistema):
{	
	int x,y;
	salida=new String();		
}
{
	(
	  //Asegura la ejecución de bloques lógicos individuales
	  bloque()
	 {
	    try {
	      //Emplea concurrencia para dormir el Thread y que se pueda ver en el dibujo
    		Thread.sleep(700);
    	    } catch (InterruptedException e) {
    		System.err.format("IOException: %s%n", e);
    		    }		 
		sistema.printOutput(salida);
		return true;
	})+
	| <EOF> {return false;} 
}

void put() :
{
	int f=1;	
}
{
	( <CHIPS>    "," f=num() {
	  
	  System.out.println(this.chipshere);
	  System.out.println(f);
	  world.putChips(f); salida = "Command:  Put Chips";


	  })
	|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

}

void get() :
{
	int f=1;	
}
{
	( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
	|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

}

int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

//TODO
// =================================================================================
// Verificaciones de parsing
// =================================================================================

//Verificación de bloques existentes (condicionales, funciones, loops...)
String bloque() :
{}
{
  	// Mediante recursividad, revisa que los paréntesis estén siempre anidados
	< LBRACKET >
	(	  bloque()|commandprotocol(true)|conditionalprotocol()|funcion()
	)*
	< RBRACKET >
	{
	  return (String)bloque();
	}
}

//Estructura de un condicional, hasta el momento solo funciona con comandos
void conditionalprotocol():
{}
{
  <IF>
  <LBRACKET> condition() <RBRACKET>
  <LBRACKET>commandprotocol(this.boolexecuter)<RBRACKET>
  <LBRACKET>commandprotocol(!this.boolexecuter) <RBRACKET>
}
	
//Esta es una condicion que se usa para el condicional 
void condition():
{}
{
    (
        facing(false)
        | zero(false)
        | canput(false)
        | canpick(false)
        | canmove(false)
        | blocked(false)

    )
    |
    (
        <NOT> <LBRACKET> (
            facing(true)
            | zero(true)
            | canput(true)
            | canpick(true)
            | canmove(true)
            | blocked(true)
        )
        <RBRACKET>
    )
}

void facing(boolean not):
{
    String o;
    int actual;
    int comp;
}
{
    <FACING> o = orientation()
    {
        actual = world.getFacing();
        comp = getNumCardinal(o);
        if (actual == comp) {
            this.boolexecuter = true;
        } else {
            this.boolexecuter = false;
        }
        if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
    }
}
	
void zero(boolean not):
	{
		int o;
	}
	{
	  < ISZERO > o=numvar()
	  {
	    if (o==0) {
            this.boolexecuter = true;
        }else {
			this.boolexecuter = false;
           }
        
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
	 }
	}
	
void canput(boolean not) :
	{
		int f=1;
		boolean can = true;	
	}
	{
		<CANPUT>
		( <CHIPS> f=numvar(){
		  Point p = world.getPosition();
		  if (world.chipExists(new Point(p.x, p.y+f-1))) {
		    	can = false;
		     }
		  if (!(world.getN()-p.y >=f)) {
		    	can = false;
				 }
		  this.boolexecuter= can; }
		| <BALLOONS> f=numvar(){ this.boolexecuter= world.getMyBalloons()-f >= 0; })
		{
		          
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
		}	 
	}

void canpick(boolean not) :
	{
		int f=1;
	}
	{
		<CANPICK>
		( <CHIPS> f=numvar(){
		  Point p = world.getPosition();
		  if (world.chipExists(p) && f == 1) { this.boolexecuter= true; }
		  else { this.boolexecuter= false; }
		  }
		| <BALLOONS> f=numvar(){ this.boolexecuter= world.countBalloons()-f >= 0; })

		{          
	  	if (not == true) {
            this.boolexecuter = !this.boolexecuter;
        }
        System.out.println("Valor de boolexecuter: " + this.boolexecuter);
		}	 
	}
void canmove(boolean not):
	{

	  boolean can = true;
	  String o;
	  int wanted;
	  Point actual;
	  int x, y;
	  		
	  o = null; 
	  wanted = 0; 
	  x = 0;
	  y = 0;

	}
	{
	  <CANMOVE> o=orientation() {
		    actual = world.getPosition();
			Point pos = new Point(1, 1);

		  	wanted = getNumCardinal(o);
		  	x = (int)actual.getX();
		  	y = (int)actual.getY();
		  	System.out.println("Actual: "+actual);
		  	System.out.println("pos: "+pos);
		  	if (wanted == 0) {
		  	  pos.setLocation(x,y-1);}
		  	else if (wanted == 1) {
		  	  pos.setLocation(x,y+1);}
		  	else if (wanted == 2) {
		  	  pos.setLocation(x+1,y);}
		  	else if (wanted == 3) {
		  	  pos.setLocation(x-1,y);}
            	System.out.println("Trueval canJumpInDir: "+x);
            	System.out.println("Trueval canJumpInDir: "+y);
            	System.out.println("Trueval canJumpInDir: "+world.getN());
            	System.out.println("Trueval canJumpInDir: "+pos);		  	  
       		 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
            	this.boolexecuter = false;

            	
       		 }else { 
		  		this.boolexecuter = !world.isBlocked(pos);
			}
       		 
		    if (not == true) {
            	this.boolexecuter = !this.boolexecuter;
       		 }

		  	System.out.println("Trueval canJumpInDir: "+this.boolexecuter);

		
		  }
	}

void blocked(boolean not):
	{
	  boolean can = true;
	  String o;
	  int wanted;
	  Point actual;
	  int x, y;
	  		
	  o = null; 
	  wanted = 0; 
	  x = 0;
	  y = 0;

	}
	{
	  <BLOCKED>  {
		    actual = world.getPosition();
			Point pos = new Point(1, 1);

		  	wanted = world.getFacing();
		  	x = (int)actual.getX();
		  	y = (int)actual.getY();
		  	System.out.println("Actual: "+actual);
		  	System.out.println("pos: "+pos);
		  	if (wanted == 0) {
		  	  pos.setLocation(x,y-1);}
		  	else if (wanted == 1) {
		  	  pos.setLocation(x,y+1);}
		  	else if (wanted == 2) {
		  	  pos.setLocation(x+1,y);}
		  	else if (wanted == 3) {
		  	  pos.setLocation(x-1,y);}
            	System.out.println("Trueval canJumpInDir: "+x);
            	System.out.println("Trueval canJumpInDir: "+y);
            	System.out.println("Trueval canJumpInDir: "+world.getN());
            	System.out.println("Trueval canJumpInDir: "+pos);		  	  
       		 if (pos.x >world.getN() || pos.y >world.getN() || pos.x<1 || pos.y<1) {
            	this.boolexecuter = true;

            	
       		 }else { 
		  		this.boolexecuter = world.isBlocked(pos);
			}
       		 
		    if (not == true) {
            	this.boolexecuter = !this.boolexecuter;
       		 }

		  	System.out.println("Trueval canJumpInDir: "+this.boolexecuter);

		
		  }
	}


	
int getNumCardinal(String o):
	{
	  int numCardinal;
	  numCardinal=0;
	}
	{
	  { 
	  	if (o.equals(":north")) {
	  	  numCardinal = 0; }
	  	else if (o.equals(":south")) {
	  	  numCardinal = 1; }
	  	else if (o.equals(":east")) {
	  	  numCardinal = 2; }
	  	else if (o.equals(":west")) {
	  	  numCardinal = 3; }
	  	return numCardinal;
	  	}
	 }
	 
  
void commandprotocol(boolean execute) :
{
	int x,y;
	String namevar;
	String direction;
	String direccion;
	salida=new String();
	y = world.getFacing();

}
{
  
    // Crear variables
    <DEFVAR> namevar=var() x=num()
    {
        if (!variableValues.containsKey(namevar)) {
          	if(execute==true) { 
            	variableValues.put(namevar, x);
          	}
        } else {
            System.out.println(salida="Ya existe una variable asociada con ese nombre");
        }
    }
  	 // Reasignar variables
 	| <EQUAL> namevar=var() x=num()
  	{
        if (variableValues.containsKey(namevar)) {
            if(execute==true) { 
            	variableValues.put(namevar, x);
          	}
        } else {
            System.out.println(salida="No existe una variable asociada con ese nombre");
        }
    }
   	 // moverse
 	| <MOVE> x=numvar()
  	{
  	  	if(execute==true) { 
        	world.moveForward(x,false);salida = "Command: move ";
        }
    }
   	 // saltar
 	| <HOP> x=numvar()
  	{
  	 	if(execute==true) { 
        	world.moveForward(x,true);salida = "Command: skip ";
        }
    }

	// Girar
	|<TURN> direction = turn()
    {
        if (direction.equals(":right")) {
          	if(execute==true) { 
            world.turnRight(); 
            salida = "Turn right";
         	 }
        } else if (direction.equals(":around")) {
         	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn around";
            }
        } else if (direction.equals(":left")) {
          	if(execute==true) {
            world.turnRight(); 
            world.turnRight(); 
            world.turnRight(); 
            salida = "Turn left";
          	}
        } else { 
            salida = "Not valid"; 
        }
    }
	// Mirar 
	|	 <FACE>  direccion = orientation()
    {
       		if(execute==true) {
	            if (direccion.equals(":north")) {
	                while (!world.facingNorth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing north";
	            } else if (direccion.equals(":south")) {
	                while (!world.facingSouth()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing south";
	            } else if (direccion.equals(":west")) {
	                while (!world.facingWest()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing west";
	            } else if (direccion.equals(":east")) {
	                while (!world.facingEast()) { 
	                    world.turnRight(); 
	                }
	                salida = "facing east";
	            } else {
	                salida = "Non valid command";
	            }
	      }
    }
	// Moverse en una direccion 
	    |  < MOVEDIR> x=numvar() direction = direction(){
	      if(execute==true) {
		    if (direction.equals(":right")) {
		        world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":back")) {
		        world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":left")) {
		        world.turnRight();world.turnRight();world.turnRight();
		        world.moveForward(x,false);
		        world.turnRight();
		        salida = "Move";
		    } else if (direction.equals(":front")) {
		        world.moveForward(x,false);
		        salida = "Move";
		    } else {
		        salida = "Non valid direction";
		    }
		 }
	}
		  
	// Move face
	    |  < MOVEFACE> x=numvar() direccion= orientation(){

	      if(execute==true) {
            if (direccion.equals(":north")) {
                while (!world.facingNorth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
                salida = "facing north";
            } else if (direccion.equals(":south")) {
                while (!world.facingSouth()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
           
            } else if (direccion.equals(":west")) {
                while (!world.facingWest()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else if (direccion.equals(":east")) {
                while (!world.facingEast()) { 
                    world.turnRight(); 
                }
                world.moveForward(x,false);salida = "Command: Moveforward ";
                
            } else {
                salida = "Non valid command";
            }
         }
        }
     // null 

		    |  < NULL>
		    
     // Moverse de acuerdo a una lista de direcciones

		    | 
		    <RUNDIRS> (direction =direction(){

		      if(execute==true) {

				    if (direction.equals(":right")) {
				        world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the right";
				        
	
				    } else if (direction.equals(":back")) {
				        world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the back";
	
				    } else if (direction.equals(":left")) {
				        world.turnRight();world.turnRight();world.turnRight();
				        world.moveForward(1,false);
				        salida = "move to the left";
	
				    } else if (direction.equals(":front")) {
				        world.moveForward(1,false);
				        salida = "move to the front";
	
				    } else {
				        salida = "Non valid direction";
				    }
	
	
				    if (y==0) {
			                while (!world.facingNorth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing north";
			            } else if (y==1) {
			                while (!world.facingSouth()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing south";
			            } else if (y==2) {
			                while (!world.facingWest()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing west";
			            } else if (y==3) {
			                while (!world.facingEast()) { 
			                    world.turnRight(); 
			                }
			                salida = "facing east";
			          }
		     } 
		    }
		    )+
		          	
		    // put protocol
			|  <PUT> putt(execute)
			// pick protocol			  			
			|  <PICK> gett(execute)
}

String var() throws Error:
	{	
		String name= "";
	}
	{
		<NAME>
		{
			try 
			{
				name += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading variable !!");
			}
			return name;
		}
	}
	
String turn() throws Error:
	{	
		String direction= "";
	}
	{
	< RIGHT >{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	|< LEFT >{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	|< AROUND >
		{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	}


String orientation() throws Error:
	{	
		String direction= "";
	}
	{
	< NORTH >{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	|< SOUTH >{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	|< WEST >
		{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	|< EAST >
		{
			try 
			{
				direction += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error with the direction");
			}
			return direction;
		}
	}
	
void putt(boolean execute) :
	{
	    int f = 1;    
	}  
	{
	    <CHIPS> f = numvar() {

	      if(execute==true) {
	      		world.putChips(f); salida = "Command: Put Chips";
	      		this.chipshere+=f;
	    	}
	      }
	    | <BALLOONS> f = numvar() {
	      if(execute==true) {
	      		world.putBalloons(f); salida = "Command: Put Balloons";
	    	}
	      }
	}

void gett(boolean execute) :
	{
	    int f = 1;    
	}
	{
	    <CHIPS> f = numvar() {
		  if(execute==true) {
	      	world.pickChips(f); salida = "Command: Put Chips"; }
	      }
	    | <BALLOONS> f = numvar() {
		  if(execute==true) {
	      world.grabBalloons(f); salida = "Command: Put Balloons"; }
	      }
	}


int numvar() throws Error:
	{	
		int value= 0;
		String name;
	}
	{
		<NUMS>
		{
			try 
			{
				value = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return value;
		}
		
	|   < NAME>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  (int) variableValues.get(name);
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <DIM>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  world.getN();
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <MYXPOS>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  (int) world.getPosition().getX();
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <MYYPOS>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  (int) world.getPosition().getY();
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <MYCHIPS>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  (int) world.getMyChips();
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <MYBALLOONS>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  (int) world.getMyBalloons();
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	|   <BALLOONSHERE>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  world.countBalloons();
			} 
			catch (Exception e) 
			{
			}
			return value;
		}
	|   <CHIPSHERE>
	{
			try 
			{
				name = String.valueOf(token.image);
				value =  this.chipshere;
			} 
			catch (Exception e) 
			{
				throw new Error("The variable was not registered in the VAR protocol");
			}
			return value;
		}
	}
String direction() throws Error:
	{	
		String dir= "";
	}
	{
	< RIGHT >{
			try 
			{
				dir += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading the direction !!");
			}
			return dir;
		}
	|< LEFT >{
			try 
			{
				dir += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading the direction !!");
			}
			return dir;
		}
	|< FRONT >
		{
			try 
			{
				dir += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading the direction !!");
			}
			return dir;
		}
	|< BACK >
		{
			try 
			{
				dir += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading the direction !!");
			}
			return dir;
		}
	}

/* El nombre de una función es una cadena alfanumérica */
String nombreFuncion() throws Error:
	{	
		String nombre = "";
	}
	{
		<NAME>
		{
			try 
			{
				nombre += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading variable !!");
			}
			return nombre;
		}
	}

/* Los parámetros de una función son cadenas alfabéticas */
String parametroFuncion() throws Error:
	{	
		String parametro = "";
	}
	{
		<NAME>(< NUMS >)*
		{
			try 
			{
				parametro += String.valueOf(token.image);
			} 
			catch (Exception e) 
			{
				throw new Error("Error detected while reading variable !!");
			}
			return parametro;
		}
	}
	
/* Estructura de función es (defun nombre (params) (c1)(c2)...(cn))*/
void funcion():
	{
	  String nombreFun;
	  String parametro;
	  String block;
	  ArrayList<String> parametros = new ArrayList<>();
	  ArrayList<String> bloques = new ArrayList<>();
	}
	{
	  < DEFUN > nombreFun = nombreFuncion()
	  < LBRACKET >
	  (parametro = parametroFuncion()
	  {
	    //Agregar cada parámetro de la función a una lista
	    parametros.add(parametro);
	    //Agregar cada parámetro a la lista de variables auxiliares
	    variablesAuxiliares.add(parametro);
	  }
	  )*
	  < RBRACKET >
	  {
	    //Añadir la lista final al mapa de { procedimientos:[parametros] }
	    procParams.put(nombreFun, parametros);
	  }	    block = bloque()
	    {
	      bloques.add(block);
	      System.out.println(procParams);
	      System.out.println(procBloques);
	    }
	}
	